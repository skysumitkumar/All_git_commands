How to install git
sudo  apt-get install git
sudo add-apt-repository ppa:git-core/ppa
sudo update 
sudo apt install git
After that make a github account
git config --global user.name "skysumitkumar"
git config --global user.email "sky3081999@gmail.com"
git config –list
Then download github desktop
sudo apt upgrade
sudo apt install wget apt-transport-https gnupg2 software-properties-common
wget https://github.com/shiftkey/desktop/releases/download/release-3.1.7-linux1/GitHubDesktop-linux-3.1.7-linux1.deb
sudo apt install -f ./GitHubDesktop-linux-3.1.7-linux1.deb
Now commands in git

git init->in any folder when you enter this command it convert that folder to as a git repository(.git 	   hidden file)(ls -al to see the pointer in that file)
git clone->it is use to clone any repo of any person on our computer for this we use(git clone urlof 	     repo newfoldername(jis name se aap us repo ko save karna chate h)/
git diff->To find what content we change in this file
git log->It give firstly top commit that you add then all other commits
git log -n(eg. 1,2,3) ->To see no of commit to that you want to see
git log -p -> It give top down commits with content that you change
git log -oneline ->It give all commits id with name of commits
git log - -stat ->It give filenames that we commits
git show shawId(Id of commit)->It give what commit changes in that perticular shawid
git add filename-> add file to track
	    New file->add file to track
	    Old file-> staging index(commit karne se phale)
git add . ->add all modified files to track(this is not recommended)
git commit -m “file_comment” ->to commit our file and give it commit comment
git restor filename->restor file to latest commit
.gitignore->In this file we give all file names that we want git should not track these file(eg   	  	       *.txt,assets/images/*.png  )
git branch->list all branches we have
git branch name(name of new branch that you want to make)->to make a new branch
git checkout branchname->to switch diff branch
git checkout -b branchname ->to make a new branch and also shift to that branch
git commit -am “commit” ->to add and commit our file
git merge branchname->to merge branch to mainbranch
git branch -d branchname ->to delete branch
Note->when we merge 2 branch git confuse which i take and which i abort to solve this problem 	hame khud dekhna hoga ki hame file me keya chyea or keya nahi or phir use save kar dena h 	or git ko batane ke lyea ki hame confucion resolve kar deya h ham git add filename 	command ka use karange
git tag -a tagname shawId -m “comment” ->to tag a file or we can say it is our betaversion to test 						program
git tag -d tagname -> to delete tag
git pull -> it is use to update local repository to remote repository 
Note->when we update our local repository and use git pull command to get updated file from                   	remote than we have probem because git confuse to wich file he take our which not so for to 	solve this issue we use git stash command when we use this command our local file content 	is removed from file and save in some stash area to see the list of git stash we use git stash 	list after the git stash command when we use git pull it work it pull remote file in our local 	file but we also want our previous local file changes so to unstash our changes we use git 	stash apply then git also confuse which content it save or which he removed so than we 	update our file and remove confusion  to told  git i resolve issue we use git add filename 
git stash->when we use this command our current file content is save in some stash area and 		     removed from our current file
git stash list ->from this command we see the list of stash files
git stash apply->when we use this command our stash file is merge in our original file than it create 		   a issue to which content we save or which we removed than we update our file and 		   resolve this issue and to told git i resolve the issue we use git add command
git push -u origin master -> push in master branch
git revert showid ->to revert our initial commit
			1.Press Esc
			2. :wq    then press enter
git reset - -soft showid ->To move head to any commit and remove upper ommits
				here modification will show as staged in staging index
git reset - -mixed showid ->when we use this head move to new commit but our local changes see 				as modification in files
git reset --hard showid -> when we use this head move to new commit and local changes are 					discarded
git diff HEAD~
git commit --ammend ->1.press i for edit
			      2.then press enter
3. :wq then press enter
Note->for push file in remote
step 1. git remote add origin https://github.com/skysumitkumar/repository.git->with this we map local branch to github remote branch
step 2. git config --global user.name “skysumitkumar”
step 3. git config --global user.email “sky3081999@gmail.com”
step 4. git push -u origin master
	4.1 ask for username->username	
	4.2ask for password ->token no
For GUI VERSION
1.git desktop
2.sublime merge



…or create a new repository on the command line
echo "# Test_codes" >> README.md
git init
git add README.md
git commit -m "first commit"
git branch -M main

git remote add origin https://github.com/skysumitkumar/Test_codes.git
git push -u origin main
…or push an existing repository from the command line
git remote add origin https://github.com/skysumitkumar/Test_codes.git
git branch -M main
git push -u origin main


First time push data to github
git config --global user.name "xxxxxx"
git config --global user.email xxxxxx@gmail.com
git remote add origin https:///github.com/username/
git branch -m main
git remote orign 
git fetch origin
git pull origin main
git pull origin main --allow-unrelated-histories
git init
git add FileORFolderName(that you want to add)
git commit -m "image_gallery"
git push -u origin main(branch name)
git rm --cached filename:-to remove the file 
Step-by-step Vim Instructions
1.	If you are editing the commit message:
o	Make your changes.
o	Press Esc to switch to command mode.
o	Type :wq and press Enter.
2.	If you are keeping the default message:
o	Press Esc to switch to command mode.
o	

git add .\README.md
git commit -m "image_gallery"
git push origin main




When some large file push than
1.download this:- https://adoptopenjdk.net/
2.download this:- https://repo1.maven.org/maven2/com/madgag/bfg/1.13.0/bfg-1.13.0.jar
3.go to your git repository:- eg: cd D:\Study\Du_Mca
4. Move the JAR file to an accessible location:
•	For example, move it to D:\Downloads.or the folder from where you want to remove large file 
5. java -jar D:\Downloads\bfg-1.13.0.jar --strip-blobs-bigger-than 100M
So to remove large file do these steps after download the jar file
step1:-java -jar bfg-1.13.0.jar --delete-files "QUANTITATIVE APTITUDE.pdf"
step2:-git reflog expire --expire=now --all
step3:-git gc --prune=now –-aggressive
step4:-git push --force





Here’s how you can use Git LFS to track and push large files:

Install Git LFS: You can download Git LFS from https://git-lfs.github.com/ and install it on your system.

Initialize Git LFS: Run the following command in your repository:

Step1:-git lfs install

Track the Large File: Add the large file type (e.g., PDF) to Git LFS:

Step2:-git lfs track fullFilePath

Alternatively, you can track specific files by providing their paths.
Add and Commit Changes: After tracking the file, commit the changes:

Step3:-git add .gitattributes
Step3:-git add placement_data/DBMS/Notes/DBMS_Full_Notes.pdf

Step3:-git commit -m "Track large file with Git LFS"

Push Changes to GitHub: Now you can push the changes to GitHub as usual:

Step4:-git push origin main







Download Specific folder from repository
1.git clone --depth 1 --filter=blob:none --sparse https://github.com/your-username/your-repo.git
2.cd your-repo
3.git sparse-checkout init --cone
4.git sparse-checkout set folder_name
5.git pull origin main


Make tag to specific commit
1.git log --oneline
2.git tag -a v1.0 3f4a2b1 -m "Tagging version 1.0 at commit 3f4a2b1"
3.git push origin v1.0
4.git tag
5.git show v1.0



Branchig

git branch <branch-name>             # Create a new branch
git checkout -b <branch-name>        # Create and switch to a new branch
git switch -c <branch-name>          # Same as above (newer Git versions)
git checkout <branch-name>           # Switch to an existing branch
git switch <branch-name>             # Preferred alternative
git branch                           # List local branches
git branch -r                        # List remote branches
git branch -a                        # List all branches (local + remote)
git branch -d <branch-name>          # Delete local branch (safe, only if merged)
git branch -D <branch-name>          # Force delete local branch
git push origin --delete <branch>   # Delete remote branch
git merge <branch-name>              # Merge the specified branch into the current one
git rebase <branch-name>             # Rebase current branch onto another
git push origin <branch-name>        # Push local branch to remote
git pull origin <branch-name>        # Pull latest changes from a remote branch
git checkout --track origin/<branch-name>  # Create a local branch that tracks a remote one
git branch --merged                  # Branches already merged into current
git branch --no-merged               # Branches not yet merged
git branch -m <new-name>             # Rename current branch
git branch -m <old-name> <new-name>  # Rename specific branch

if we want to use two accounts on one device

download
https://cli.github.com/

gh auth logout
gh auth login
then choose github.com->HTTPS->Login with browser->Enter
when you Enter you get code in terminal 
login to the browser that show after click on Enter
than paste code that you see in the terminal
now you can access that account on your device

